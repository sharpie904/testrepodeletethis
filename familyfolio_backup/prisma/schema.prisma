generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://ffuser:ffpass@192.168.1.36:1648/ffdb"
}

model User {
  id            String       @id
  name          String
  email         String       @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  Account       Account[]
  Invitation    Invitation[]
  Member        Member[]
  Session       Session[]

  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  activeOrganizationId String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verification")
}

model Organization {
  id           String         @id
  name         String
  slug         String?        @unique
  logo         String?
  createdAt    DateTime
  metadata     String?
  Invitation   Invitation[]
  Member       Member[]
  FamilyMember FamilyMember[]

  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  userId         String
  email          String
  role           String
  createdAt      DateTime
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model FamilyMember {
  id             String   @id @default(cuid())
  organizationId String
  firstName      String
  lastName       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  email          String?

  memberInformation FamilyMemberInformation?
  organization      Organization             @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // @@unique([organizationId, email])
  @@unique([organizationId, firstName, lastName])

  @@map("family_member")
}

model FamilyMemberInformation {
  id             String   @id @default(cuid())
  familyMemberId String   @unique
  dateOfBirth    DateTime
  relationship   String
  email          String
  phone          String

  familyMember FamilyMember @relation(fields: [familyMemberId], references: [id], onDelete: Cascade)

  @@map("family_member_information")
}
